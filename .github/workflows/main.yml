name: Build and Release for Chrome and Firefox

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 18

    - name: Install dependencies
      run: npm install

    - name: Build for Chrome
      run: npm run build:chrome

    - name: Archive Chrome build files
      run: cd dist/chrome && zip -r -FS ../../build-chrome.zip . --exclude '*.git*'

    - name: Build for Firefox
      run: npm run build:firefox

    - name: Archive Firefox build files
      run: cd dist/firefox && zip -r -FS ../../build-firefox.zip . --exclude '*.git*'

    - name: Check if Release Exists
      id: check_release
      uses: actions/github-script@v6
      with:
        script: |
          const { Octokit } = require("@octokit/core");
          const octokit = new Octokit({ auth: process.env.GITHUB_TOKEN });

          // List releases
          const { data: releases } = await octokit.request('GET /repos/{owner}/{repo}/releases', {
            owner: context.repo.owner,
            repo: context.repo.repo
          });

          // Check if release with specific name exists
          const existingRelease = releases.find(release => release.name === 'Latest Release');
          if (existingRelease) {
            return {
              release_exists: 'true',
              upload_url: existingRelease.upload_url
            };
          } else {
            return {
              release_exists: 'false'
            };
          }

    - name: Create or Update GitHub Release
      id: create_or_update_release
      uses: actions/github-script@v6
      with:
        script: |
          const { Octokit } = require("@octokit/core");
          const octokit = new Octokit({ auth: process.env.GITHUB_TOKEN });

          const releaseExists = '${{ steps.check_release.outputs.release_exists }}' === 'true';

          if (releaseExists) {
            // Update existing release
            const uploadUrl = '${{ steps.check_release.outputs.upload_url }}'.split('{')[0];
            return {
              upload_url: uploadUrl
            };
          } else {
            // Create a new release
            const { data: release } = await octokit.request('POST /repos/{owner}/{repo}/releases', {
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: 'latest-release',
              name: 'Latest Release',
              draft: false,
              prerelease: false
            });
            return {
              upload_url: release.upload_url.split('{')[0]
            };
          }

    - name: Upload Chrome build to release
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_or_update_release.outputs.upload_url }}
        asset_path: ./build-chrome.zip
        asset_name: build-chrome.zip
        asset_content_type: application/zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload Firefox build to release
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_or_update_release.outputs.upload_url }}
        asset_path: ./build-firefox.zip
        asset_name: build-firefox.zip
        asset_content_type: application/zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
